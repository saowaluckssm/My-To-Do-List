{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useReducer } from \"react\";\nconst initialInputStae = {\n  value: \"\",\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === \"INPUT\") {\n    return {\n      value: action.value,\n      isTouched: state.value\n    };\n  }\n\n  if (action.type === \"BLUR\") {\n    return {\n      isTouched: true,\n      value: state.value\n    };\n  }\n\n  if (action.type === \"RESET\") {\n    return {\n      isTouched: false,\n      value: \"\"\n    };\n  }\n\n  return initialInputStae;\n};\n\nconst useInput = validateValue => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialInputStae); // const [enteredValue, setEnteredValue] = useState(\"\");\n  // const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = e => {\n    dispatch({\n      type: \"INPUT\",\n      value: e.target.value\n    }); // setEnteredValue(e.target.value);\n  };\n\n  const inputBlurHandler = e => {\n    dispatch({\n      type: \"BLUR\"\n    }); // setIsTouched(true);\n  };\n\n  const reset = () => {\n    // setEnteredValue(\"\");\n    // setIsTouched(false);\n    dispatch({\n      type: \"RESET\"\n    });\n  };\n\n  return {\n    value: inputState.value,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"cdg6j7P6MEXVlA7lK38x8BH23Sc=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/saowalucksrikrishna/Desktop/react-to-do-list/src/context/alert/useInput.js"],"names":["useState","useReducer","initialInputStae","value","isTouched","inputStateReducer","state","action","type","useInput","validateValue","inputState","dispatch","valueIsValid","hasError","valueChangeHandler","e","target","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,SAAS,EAAE;AAFY,CAAzB;;AAKA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,MAAIA,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAO;AAAEL,MAAAA,KAAK,EAAEI,MAAM,CAACJ,KAAhB;AAAuBC,MAAAA,SAAS,EAAEE,KAAK,CAACH;AAAxC,KAAP;AACD;;AACD,MAAII,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AAC1B,WAAO;AAAEJ,MAAAA,SAAS,EAAE,IAAb;AAAmBD,MAAAA,KAAK,EAAEG,KAAK,CAACH;AAAhC,KAAP;AACD;;AACD,MAAII,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAO;AAAEJ,MAAAA,SAAS,EAAE,KAAb;AAAoBD,MAAAA,KAAK,EAAE;AAA3B,KAAP;AACD;;AAED,SAAOD,gBAAP;AACD,CAZD;;AAcA,MAAMO,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAClC,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBX,UAAU,CACvCI,iBADuC,EAEvCH,gBAFuC,CAAzC,CADkC,CAKlC;AACA;;AAEA,QAAMW,YAAY,GAAGH,aAAa,CAACC,UAAU,CAACR,KAAZ,CAAlC;AACA,QAAMW,QAAQ,GAAG,CAACD,YAAD,IAAiBF,UAAU,CAACP,SAA7C;;AAEA,QAAMW,kBAAkB,GAAIC,CAAD,IAAO;AAChCJ,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE,OAAR;AAAiBL,MAAAA,KAAK,EAAEa,CAAC,CAACC,MAAF,CAASd;AAAjC,KAAD,CAAR,CADgC,CAEhC;AACD,GAHD;;AAKA,QAAMe,gBAAgB,GAAIF,CAAD,IAAO;AAC9BJ,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR,CAD8B,CAE9B;AACD,GAHD;;AAKA,QAAMW,KAAK,GAAG,MAAM;AAClB;AACA;AACAP,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAJD;;AAMA,SAAO;AACLL,IAAAA,KAAK,EAAEQ,UAAU,CAACR,KADb;AAELiB,IAAAA,OAAO,EAAEP,YAFJ;AAGLC,IAAAA,QAHK;AAILC,IAAAA,kBAJK;AAKLG,IAAAA,gBALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CAnCD;;GAAMV,Q;;AAqCN,eAAeA,QAAf","sourcesContent":["import { useState, useReducer } from \"react\";\n\nconst initialInputStae = {\n  value: \"\",\n  isTouched: false,\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === \"INPUT\") {\n    return { value: action.value, isTouched: state.value };\n  }\n  if (action.type === \"BLUR\") {\n    return { isTouched: true, value: state.value };\n  }\n  if (action.type === \"RESET\") {\n    return { isTouched: false, value: \"\" };\n  }\n\n  return initialInputStae;\n};\n\nconst useInput = (validateValue) => {\n  const [inputState, dispatch] = useReducer(\n    inputStateReducer,\n    initialInputStae\n  );\n  // const [enteredValue, setEnteredValue] = useState(\"\");\n  // const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = (e) => {\n    dispatch({ type: \"INPUT\", value: e.target.value });\n    // setEnteredValue(e.target.value);\n  };\n\n  const inputBlurHandler = (e) => {\n    dispatch({ type: \"BLUR\" });\n    // setIsTouched(true);\n  };\n\n  const reset = () => {\n    // setEnteredValue(\"\");\n    // setIsTouched(false);\n    dispatch({ type: \"RESET\" });\n  };\n\n  return {\n    value: inputState.value,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  };\n};\n\nexport default useInput;\n"]},"metadata":{},"sourceType":"module"}