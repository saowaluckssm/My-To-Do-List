{"ast":null,"code":"var _jsxFileName = \"/Users/saowalucksrikrishna/Desktop/test/react-to-do-list-copy/src/context/alert/AlertState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\"; // import AlertContext from \"./alertContext\";\n\nimport alertReducer from \"./alertReducer\";\nimport { CHECK_INPUT, CHECK_BLUR, RESET } from \"../types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AlertState = props => {\n  _s();\n\n  const initialState = {\n    value: \"\",\n    isTouched: false\n  };\n  const [state, dispatch] = useReducer(alertReducer, initialState);\n  const valueIsValid = props(state.value);\n  const hasError = !valueIsValid && state.isTouched; // Check input change\n\n  const valueChangeHandler = e => {\n    dispatch({\n      type: CHECK_INPUT,\n      value: e.target.value\n    });\n  }; // Check input Blur\n\n\n  const inputBlurHandler = () => {\n    dispatch({\n      type: CHECK_BLUR\n    });\n  }; // Reset value\n\n\n  const reset = () => {\n    dispatch({\n      type: RESET\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AlertContext.Provider, {\n    value: {\n      value: state.value,\n      isValid: valueIsValid,\n      hasError,\n      valueChangeHandler,\n      inputBlurHandler,\n      reset\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this); // return {\n  //   value: state.value,\n  //   isValid: valueIsValid,\n  //   hasError,\n  //   valueChangeHandler,\n  //   inputBlurHandler,\n  //   reset,\n  // };\n};\n\n_s(AlertState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = AlertState;\nexport default AlertState;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlertState\");","map":{"version":3,"sources":["/Users/saowalucksrikrishna/Desktop/test/react-to-do-list-copy/src/context/alert/AlertState.js"],"names":["React","useReducer","alertReducer","CHECK_INPUT","CHECK_BLUR","RESET","AlertState","props","initialState","value","isTouched","state","dispatch","valueIsValid","hasError","valueChangeHandler","e","type","target","inputBlurHandler","reset","isValid","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC,C,CACA;;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,KAAlC,QAA+C,UAA/C;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAMC,YAAY,GAAG;AAAEC,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,SAAS,EAAE;AAAxB,GAArB;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,UAAU,CAACC,YAAD,EAAeM,YAAf,CAApC;AAEA,QAAMK,YAAY,GAAGN,KAAK,CAACI,KAAK,CAACF,KAAP,CAA1B;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,KAAK,CAACD,SAAxC,CAN4B,CAQ5B;;AACA,QAAMK,kBAAkB,GAAIC,CAAD,IAAO;AAChCJ,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEd,WAAR;AAAqBM,MAAAA,KAAK,EAAEO,CAAC,CAACE,MAAF,CAAST;AAArC,KAAD,CAAR;AACD,GAFD,CAT4B,CAa5B;;;AACA,QAAMU,gBAAgB,GAAG,MAAM;AAC7BP,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEb;AAAR,KAAD,CAAR;AACD,GAFD,CAd4B,CAkB5B;;;AACA,QAAMgB,KAAK,GAAG,MAAM;AAClBR,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEZ;AAAR,KAAD,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLI,MAAAA,KAAK,EAAEE,KAAK,CAACF,KADR;AAELY,MAAAA,OAAO,EAAER,YAFJ;AAGLC,MAAAA,QAHK;AAILC,MAAAA,kBAJK;AAKLI,MAAAA,gBALK;AAMLC,MAAAA;AANK,KADT;AAAA,cAUGb,KAAK,CAACe;AAVT;AAAA;AAAA;AAAA;AAAA,UADF,CAvB4B,CAsC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CA9CD;;GAAMhB,U;;KAAAA,U;AAgDN,eAAeA,UAAf","sourcesContent":["import React, { useReducer } from \"react\";\n// import AlertContext from \"./alertContext\";\nimport alertReducer from \"./alertReducer\";\nimport { CHECK_INPUT, CHECK_BLUR, RESET } from \"../types\";\n\nconst AlertState = (props) => {\n  const initialState = { value: \"\", isTouched: false };\n\n  const [state, dispatch] = useReducer(alertReducer, initialState);\n\n  const valueIsValid = props(state.value);\n  const hasError = !valueIsValid && state.isTouched;\n\n  // Check input change\n  const valueChangeHandler = (e) => {\n    dispatch({ type: CHECK_INPUT, value: e.target.value });\n  };\n\n  // Check input Blur\n  const inputBlurHandler = () => {\n    dispatch({ type: CHECK_BLUR });\n  };\n\n  // Reset value\n  const reset = () => {\n    dispatch({ type: RESET });\n  };\n\n  return (\n    <AlertContext.Provider\n      value={{\n        value: state.value,\n        isValid: valueIsValid,\n        hasError,\n        valueChangeHandler,\n        inputBlurHandler,\n        reset,\n      }}\n    >\n      {props.children}\n    </AlertContext.Provider>\n  );\n\n  // return {\n  //   value: state.value,\n  //   isValid: valueIsValid,\n  //   hasError,\n  //   valueChangeHandler,\n  //   inputBlurHandler,\n  //   reset,\n  // };\n};\n\nexport default AlertState;\n"]},"metadata":{},"sourceType":"module"}