{"ast":null,"code":"var _jsxFileName = \"/Users/saowalucksrikrishna/Desktop/react-to-do-list/src/context/list/ListState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport ListContext from \"./listContext\";\nimport listReducer from \"./listReducer\";\nimport { ADD_LIST, DELETE_LIST, SET_CURRENT, CLEAR_CURRENT, UPDATE_LIST, FILTER_LISTS, CLEAR_FILTER } from \"../types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ListState = props => {\n  _s();\n\n  const initialState = {\n    // lists: [\n    //   {\n    //     id: 1,\n    //     msg: \"yoga\",\n    //   },\n    //   {\n    //     id: 2,\n    //     msg: \"study\",\n    //   },\n    //   {\n    //     id: 3,\n    //     msg: \"eat\",\n    //   },\n    // ],\n    current: null,\n    filtered: null\n  };\n  const [state, dispatch] = useReducer(listReducer, initialState); // Save lists to localstorage\n\n  const createLocalLists = inputText => {\n    if (localStorage.getItem(\"lists\") === null) {\n      localStorage.setItem(\"lists\", JSON.stringify([]));\n    } else {\n      var storedNames = JSON.parse(localStorage.getItem(\"lists\"));\n      console.log(storedNames);\n    }\n  };\n\n  createLocalLists(); // Add List\n\n  const addList = inputText => {\n    inputText.id = uuidv4();\n    console.log(inputText); // localStorage.setItem(\"lists\", JSON.stringify(inputText));\n\n    dispatch({\n      type: ADD_LIST,\n      payload: inputText\n    });\n  }; // Delete List\n\n\n  const deleteList = id => {\n    console.log(id);\n    dispatch({\n      type: DELETE_LIST,\n      payload: id\n    });\n  }; // Set Current List\n\n\n  const setCurrent = inputText => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: inputText\n    });\n  }; // Clear Current List\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; // Update List\n\n\n  const updateList = inputText => {\n    dispatch({\n      type: UPDATE_LIST,\n      payload: inputText\n    });\n  }; // Filter Lists\n\n\n  const filterLists = text => {\n    dispatch({\n      type: FILTER_LISTS,\n      payload: text\n    });\n  }; // Clear Filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ListContext.Provider, {\n    value: {\n      lists: state.lists,\n      current: state.current,\n      filtered: state.filtered,\n      createLocalLists,\n      addList,\n      deleteList,\n      setCurrent,\n      clearCurrent,\n      updateList,\n      filterLists,\n      clearFilter\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ListState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ListState;\nexport default ListState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListState\");","map":{"version":3,"sources":["/Users/saowalucksrikrishna/Desktop/react-to-do-list/src/context/list/ListState.js"],"names":["React","useReducer","v4","uuidv4","ListContext","listReducer","ADD_LIST","DELETE_LIST","SET_CURRENT","CLEAR_CURRENT","UPDATE_LIST","FILTER_LISTS","CLEAR_FILTER","ListState","props","initialState","current","filtered","state","dispatch","createLocalLists","inputText","localStorage","getItem","setItem","JSON","stringify","storedNames","parse","console","log","addList","id","type","payload","deleteList","setCurrent","clearCurrent","updateList","filterLists","text","clearFilter","lists","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport ListContext from \"./listContext\";\nimport listReducer from \"./listReducer\";\nimport {\n  ADD_LIST,\n  DELETE_LIST,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_LIST,\n  FILTER_LISTS,\n  CLEAR_FILTER,\n} from \"../types\";\n\nconst ListState = (props) => {\n  const initialState = {\n    // lists: [\n    //   {\n    //     id: 1,\n    //     msg: \"yoga\",\n    //   },\n    //   {\n    //     id: 2,\n    //     msg: \"study\",\n    //   },\n    //   {\n    //     id: 3,\n    //     msg: \"eat\",\n    //   },\n    // ],\n\n    current: null,\n    filtered: null,\n  };\n\n  const [state, dispatch] = useReducer(listReducer, initialState);\n\n  // Save lists to localstorage\n  const createLocalLists = (inputText) => {\n    if (localStorage.getItem(\"lists\") === null) {\n      localStorage.setItem(\"lists\", JSON.stringify([]));\n    } else {\n      var storedNames = JSON.parse(localStorage.getItem(\"lists\"));\n      console.log(storedNames);\n    }\n  };\n\n  createLocalLists();\n\n  // Add List\n  const addList = (inputText) => {\n    inputText.id = uuidv4();\n    console.log(inputText);\n    // localStorage.setItem(\"lists\", JSON.stringify(inputText));\n    dispatch({ type: ADD_LIST, payload: inputText });\n  };\n\n  // Delete List\n  const deleteList = (id) => {\n    console.log(id);\n    dispatch({ type: DELETE_LIST, payload: id });\n  };\n\n  // Set Current List\n  const setCurrent = (inputText) => {\n    dispatch({ type: SET_CURRENT, payload: inputText });\n  };\n\n  // Clear Current List\n  const clearCurrent = () => {\n    dispatch({ type: CLEAR_CURRENT });\n  };\n\n  // Update List\n  const updateList = (inputText) => {\n    dispatch({ type: UPDATE_LIST, payload: inputText });\n  };\n\n  // Filter Lists\n  const filterLists = (text) => {\n    dispatch({ type: FILTER_LISTS, payload: text });\n  };\n\n  // Clear Filter\n  const clearFilter = () => {\n    dispatch({ type: CLEAR_FILTER });\n  };\n\n  return (\n    <ListContext.Provider\n      value={{\n        lists: state.lists,\n        current: state.current,\n        filtered: state.filtered,\n        createLocalLists,\n        addList,\n        deleteList,\n        setCurrent,\n        clearCurrent,\n        updateList,\n        filterLists,\n        clearFilter,\n      }}\n    >\n      {props.children}\n    </ListContext.Provider>\n  );\n};\n\nexport default ListState;\n"]},"metadata":{},"sourceType":"module"}