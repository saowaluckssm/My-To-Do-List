{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\"; // import AlertContext from \"./alertContext\";\n\nimport alertReducer from \"./alertReducer\";\nimport { CHECK_INPUT, CHECK_BLUR, RESET } from \"../types\";\n\nconst AlertState = props => {\n  _s();\n\n  // console.log(props);\n  const initialState = {\n    value: \"\",\n    isTouched: false\n  };\n  const [state, dispatch] = useReducer(alertReducer, initialState);\n  const valueIsValid = state.value;\n  const hasError = !valueIsValid && state.isTouched; // Check input change\n\n  const valueChangeHandler = e => {\n    console.log(e);\n    dispatch({\n      type: CHECK_INPUT,\n      value: e.target.value\n    });\n  }; // Check input Blur\n\n\n  const inputBlurHandler = () => {\n    dispatch({\n      type: CHECK_BLUR\n    });\n  }; // Reset value\n\n\n  const reset = () => {\n    dispatch({\n      type: RESET\n    });\n  }; // return (\n  //   <AlertContext.Provider\n  //     value={{\n  //       value: state.value,\n  //       isValid: valueIsValid,\n  //       hasError,\n  //       valueChangeHandler,\n  //       inputBlurHandler,\n  //       reset,\n  //     }}\n  //   >\n  //     {props.children}\n  //   </AlertContext.Provider>\n  // );\n\n\n  return {\n    value: state.value,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(AlertState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = AlertState;\nexport default AlertState;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlertState\");","map":{"version":3,"sources":["/Users/saowalucksrikrishna/Desktop/test/react-to-do-list-copy/src/context/alert/AlertState.js"],"names":["useReducer","alertReducer","CHECK_INPUT","CHECK_BLUR","RESET","AlertState","props","initialState","value","isTouched","state","dispatch","valueIsValid","hasError","valueChangeHandler","e","console","log","type","target","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B,C,CACA;;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,KAAlC,QAA+C,UAA/C;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5B;AACA,QAAMC,YAAY,GAAG;AAAEC,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,SAAS,EAAE;AAAxB,GAArB;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,UAAU,CAACC,YAAD,EAAeM,YAAf,CAApC;AAEA,QAAMK,YAAY,GAAGF,KAAK,CAACF,KAA3B;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,KAAK,CAACD,SAAxC,CAP4B,CAS5B;;AACA,QAAMK,kBAAkB,GAAIC,CAAD,IAAO;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAJ,IAAAA,QAAQ,CAAC;AAAEO,MAAAA,IAAI,EAAEhB,WAAR;AAAqBM,MAAAA,KAAK,EAAEO,CAAC,CAACI,MAAF,CAASX;AAArC,KAAD,CAAR;AACD,GAHD,CAV4B,CAe5B;;;AACA,QAAMY,gBAAgB,GAAG,MAAM;AAC7BT,IAAAA,QAAQ,CAAC;AAAEO,MAAAA,IAAI,EAAEf;AAAR,KAAD,CAAR;AACD,GAFD,CAhB4B,CAoB5B;;;AACA,QAAMkB,KAAK,GAAG,MAAM;AAClBV,IAAAA,QAAQ,CAAC;AAAEO,MAAAA,IAAI,EAAEd;AAAR,KAAD,CAAR;AACD,GAFD,CArB4B,CAyB5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAO;AACLI,IAAAA,KAAK,EAAEE,KAAK,CAACF,KADR;AAELc,IAAAA,OAAO,EAAEV,YAFJ;AAGLC,IAAAA,QAHK;AAILC,IAAAA,kBAJK;AAKLM,IAAAA,gBALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CAhDD;;GAAMhB,U;;KAAAA,U;AAkDN,eAAeA,UAAf","sourcesContent":["import { useReducer } from \"react\";\n// import AlertContext from \"./alertContext\";\nimport alertReducer from \"./alertReducer\";\nimport { CHECK_INPUT, CHECK_BLUR, RESET } from \"../types\";\n\nconst AlertState = (props) => {\n  // console.log(props);\n  const initialState = { value: \"\", isTouched: false };\n\n  const [state, dispatch] = useReducer(alertReducer, initialState);\n\n  const valueIsValid = state.value;\n  const hasError = !valueIsValid && state.isTouched;\n\n  // Check input change\n  const valueChangeHandler = (e) => {\n    console.log(e);\n    dispatch({ type: CHECK_INPUT, value: e.target.value });\n  };\n\n  // Check input Blur\n  const inputBlurHandler = () => {\n    dispatch({ type: CHECK_BLUR });\n  };\n\n  // Reset value\n  const reset = () => {\n    dispatch({ type: RESET });\n  };\n\n  // return (\n  //   <AlertContext.Provider\n  //     value={{\n  //       value: state.value,\n  //       isValid: valueIsValid,\n  //       hasError,\n  //       valueChangeHandler,\n  //       inputBlurHandler,\n  //       reset,\n  //     }}\n  //   >\n  //     {props.children}\n  //   </AlertContext.Provider>\n  // );\n\n  return {\n    value: state.value,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  };\n};\n\nexport default AlertState;\n"]},"metadata":{},"sourceType":"module"}